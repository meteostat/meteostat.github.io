(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{386:function(t,a,e){"use strict";e.r(a);var s=e(42),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"hourly-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hourly-data"}},[t._v("#")]),t._v(" Hourly Data")]),t._v(" "),e("p",[t._v("If you want to investigate the weather on a particular day or a short period of time, the "),e("code",[t._v("Hourly")]),t._v(" class is a perfect match. It may include "),e("a",{attrs:{href:"https://www.dwd.de/EN/ourservices/met_application_mosmix/met_application_mosmix.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("MOSMIX"),e("OutboundLink")],1),t._v(" model data to fill gaps in the observations.")]),t._v(" "),e("h2",{attrs:{id:"data-access"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data-access"}},[t._v("#")]),t._v(" Data Access")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("Hourly")]),t._v(" class takes a mandatory "),e("code",[t._v("stations")]),t._v(" parameter which can either be supplied with a fetched query to the "),e("code",[t._v("Stations")]),t._v(" class or a list of Meteostat weather station identifiers. Furthermore, you can pass a "),e("code",[t._v("start")]),t._v(" and "),e("code",[t._v("end")]),t._v(" datetime to limit your query to a certain time range. Let's have a look at this example:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Import requirements")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" meteostat "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Stations"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Hourly\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" datetime "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" datetime\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Get closest weather station to random coordinates")]),t._v("\nstations "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Stations"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lat "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lon "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nstation "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stations"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fetch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Fetch hourly data for one day")]),t._v("\ndata "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Hourly"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("station"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datetime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datetime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("59")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Print response DataFrame")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fetch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("The "),e("code",[t._v("fetch()")]),t._v(" method returns a Pandas DataFrame with multiple meteorological columns.")]),t._v(" "),e("h2",{attrs:{id:"response-parameters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#response-parameters"}},[t._v("#")]),t._v(" Response Parameters")]),t._v(" "),e("p",[t._v("The DataFrame provides the following columns:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("station")]),t._v(": The Meteostat ID of the weather station")]),t._v(" "),e("li",[e("code",[t._v("time")]),t._v(": The datetime of the observation")]),t._v(" "),e("li",[e("code",[t._v("temp")]),t._v(": The air temperature in "),e("em",[t._v("°C")])]),t._v(" "),e("li",[e("code",[t._v("dwpt")]),t._v(": The dew point in "),e("em",[t._v("°C")])]),t._v(" "),e("li",[e("code",[t._v("rhum")]),t._v(": The relative humidity in percent ("),e("em",[t._v("%")]),t._v(")")]),t._v(" "),e("li",[e("code",[t._v("prcp")]),t._v(": The one hour precipitation total in "),e("em",[t._v("mm")])]),t._v(" "),e("li",[e("code",[t._v("snow")]),t._v(": The snow depth in "),e("em",[t._v("mm")])]),t._v(" "),e("li",[e("code",[t._v("wdir")]),t._v(": The average wind direction in degrees ("),e("em",[t._v("°")]),t._v(")")]),t._v(" "),e("li",[e("code",[t._v("wspd")]),t._v(": The average wind speed in "),e("em",[t._v("km/h")])]),t._v(" "),e("li",[e("code",[t._v("wpgt")]),t._v(": The peak wind gust in "),e("em",[t._v("km/h")])]),t._v(" "),e("li",[e("code",[t._v("pres")]),t._v(": The average sea-level air pressure in "),e("em",[t._v("hPa")])]),t._v(" "),e("li",[e("code",[t._v("tsun")]),t._v(": The one hour sunshine total in minutes ("),e("em",[t._v("m")]),t._v(")")]),t._v(" "),e("li",[e("code",[t._v("coco")]),t._v(": The "),e("a",{attrs:{href:"https://dev.meteostat.net/getting-started/formats-and-units",target:"_blank",rel:"noopener noreferrer"}},[t._v("weather condition code"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"normalization"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#normalization"}},[t._v("#")]),t._v(" Normalization")]),t._v(" "),e("p",[t._v("Meteostat essentially skips gaps in its time series. Therefore, the raw response does not necessarily contain one row per hour. You can make sure gaps are filled with "),e("code",[t._v("nan")]),t._v(" values by applying the "),e("code",[t._v("normalize()")]),t._v(" method. Our example from above could easily be normalized by making a small change:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Fetch hourly data for one day")]),t._v("\ndata "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Hourly"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("station"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datetime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datetime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("59")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Normalize")]),t._v("\ndata "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("normalize"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"interpolation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#interpolation"}},[t._v("#")]),t._v(" Interpolation")]),t._v(" "),e("p",[t._v("Normalizing your data paves the way for interpolation. The "),e("code",[t._v("interpolate()")]),t._v(" method closes gaps in your time series using linear regression. It takes a "),e("code",[t._v("limit")]),t._v(" parameter which specifies the maximum number of consecutive "),e("code",[t._v("nan")]),t._v(" values. The default value of "),e("code",[t._v("3")]),t._v(" means that up to three consecutive missing hours are interpolated. Again, we can simply adapt our existing example:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Fetch hourly data for one day")]),t._v("\ndata "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Hourly"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("station"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datetime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datetime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("59")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Normalize and interpolate up to three hours")]),t._v("\ndata "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("normalize"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interpolate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("limit "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"aggregation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aggregation"}},[t._v("#")]),t._v(" Aggregation")]),t._v(" "),e("p",[t._v("Aggregation is another important tool in data science. Meteostat provides an "),e("code",[t._v("aggregate()")]),t._v(" method for time-wise and spatial aggregation. It takes a "),e("code",[t._v("freq")]),t._v(" parameter which specifies the frequency of our aggregation. Optionally, you can overwrite the default aggregation functions by passing a dictionary to the "),e("code",[t._v("functions")]),t._v(" parameter. If you want to apply aggregation across all weather stations in your result, just set the "),e("code",[t._v("spatial")]),t._v(" parameter to "),e("code",[t._v("True")]),t._v(".")]),t._v(" "),e("p",[t._v("Let's calculate the summary of a particular day at Frankfurt Airport as an example:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Import dependencies")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" meteostat "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Stations"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Hourly\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" datetime "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" datetime\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Get weather station 'Frankfurt Airport' by WMO ID")]),t._v("\nstations "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Stations"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("wmo "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10637'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nstation "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stations"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fetch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Get hourly data for January 1, 2020")]),t._v("\ndata "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Hourly"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("station"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datetime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datetime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("59")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aggregate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("freq "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1D'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Print summary")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fetch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"default-aggregation-functions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#default-aggregation-functions"}},[t._v("#")]),t._v(" Default Aggregation Functions")]),t._v(" "),e("p",[t._v("By default, Meteostat uses the following aggregation functions:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("time")]),t._v(" => "),e("code",[t._v("first")])]),t._v(" "),e("li",[e("code",[t._v("temp")]),t._v(" => "),e("code",[t._v("mean")])]),t._v(" "),e("li",[e("code",[t._v("dwpt")]),t._v(" => "),e("code",[t._v("mean")])]),t._v(" "),e("li",[e("code",[t._v("rhum")]),t._v(" => "),e("code",[t._v("mean")])]),t._v(" "),e("li",[e("code",[t._v("prcp")]),t._v(" => "),e("code",[t._v("sum")])]),t._v(" "),e("li",[e("code",[t._v("snow")]),t._v(" => "),e("code",[t._v("mean")])]),t._v(" "),e("li",[e("code",[t._v("wdir")]),t._v(" => "),e("code",[t._v("mean")])]),t._v(" "),e("li",[e("code",[t._v("wspd")]),t._v(" => "),e("code",[t._v("mean")])]),t._v(" "),e("li",[e("code",[t._v("wpgt")]),t._v(" => "),e("code",[t._v("max")])]),t._v(" "),e("li",[e("code",[t._v("pres")]),t._v(" => "),e("code",[t._v("mean")])]),t._v(" "),e("li",[e("code",[t._v("tsun")]),t._v(" => "),e("code",[t._v("sum")])]),t._v(" "),e("li",[e("code",[t._v("coco")]),t._v(" => "),e("code",[t._v("max")])])]),t._v(" "),e("p",[t._v("You can overwrite the defaults by passing a dictionary to the "),e("code",[t._v("functions")]),t._v(" parameter.")]),t._v(" "),e("h2",{attrs:{id:"data-coverage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data-coverage"}},[t._v("#")]),t._v(" Data Coverage")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("coverage()")]),t._v(" method returns a float value which describes the completeness of a DataFrame or series. A value of "),e("code",[t._v("1")]),t._v(" (= 100%) means that the dataset is complete. The method takes an optional "),e("code",[t._v("parameter")]),t._v(" attribute. If present, the method returns the coverage for that particular parameter instead of the whole DataFrame.")]),t._v(" "),e("h2",{attrs:{id:"fetch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fetch"}},[t._v("#")]),t._v(" Fetch")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("fetch()")]),t._v(" method returns a Pandas DataFrame.")])])}),[],!1,null,null,null);a.default=n.exports}}]);